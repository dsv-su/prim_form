<?php

/**
 * @file
 * This is the file description for Prim teacher form module.
 *
 * In this more verbose, multi-line description, you can specify what this
 * file does exactly. Make sure to wrap your documentation in column 78 so
 * that the file can be displayed nicely in default-sized consoles.
 */

/**
 * Implementation of hook_menu().
 */
function prim_form_menu() {
  $items['admin/prim/prim_form'] = array(
    'title' => 'Prim form',
    'description' => 'Configure Prim form settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('prim_form_admin_form'),
    'access arguments' => array('administer Prim form'),
    'file' => 'includes/prim_form.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_permission().
 */
function prim_form_permission() {
  return array(
    'administer Prim form' => array(
      'title' => t('Administer Prim form'),
      'description' => t('Perform maintenance tasks for Prim form'),
    ),
  );
}

/**
 * Implementation of hook_webform_submission_presave().
 *
 * Modify a Webform submission, prior to saving it in the database.
 */
function prim_form_webform_submission_presave($node, &$submission) {

  // If a draft have been saved before submitting.
  // If the submission is in it's final state and this is a teacher form node.
  if (isset($submission->sid) && $submission->is_draft == 0 && $node->type == variable_get('prim_form_teacher_type')) {

    watchdog(
      'Prim form',
       t('Teacher form submitted by @user'),
       $variables = array('@user' => format_username(user_load($submission->uid))),
       $severity = WATCHDOG_INFO,
       $link = NULL
    );

    $query = db_select('prim_form')
      ->fields('prim_form', array('aid'))
      ->condition('uid',$submission->uid)
      ->condition('nid', $node->nid)
      ->condition('sid', $submission->sid)
      ->execute()
      ->fetchAssoc();

    if (!$query) {

      db_insert('prim_form')
        ->fields(array(
          'uid' => $submission->uid,
          'nid' => $node->nid,
          'sid' => $submission->sid,
        ))
        ->execute();
    }
  }
}

/**
 * Implementation of hook_webform_submission_insert().
 *
 * Respond to a Webform submission being inserted.
 *
 * Note that this hook is called after a submission has already been saved to
 * the database. If needing to modify the submission prior to insertion, use
 * hook_webform_submission_presave().
 */
function prim_form_webform_submission_insert($node, $submission) {
  
  // If no draft have been saved before submitting.
  // If the submission is in it's final state and this is a teacher form node.
  if ($submission->is_draft == 0 && $node->type == variable_get('prim_form_teacher_type')) {
    watchdog(
      'Prim form',
      t('Teacher form submitted by @user'),
      $variables = array('@user' => format_username(user_load($submission->uid))),
      $severity = WATCHDOG_INFO,
      $link = NULL
    );

    db_insert('prim_form')
      ->fields(array(
        'uid' => $submission->uid,
        'nid' => $node->nid,
        'sid' => $submission->sid,
      ))
      ->execute();
  }
}

/**
 * Implementation of hook_webform_submission_delete().
 *
 * Respond to a Webform submission being deleted.
 */
function prim_form_webform_submission_delete($node, $submission) {
  // Delete a record from a 3rd-party module table when a submission is deleted.
  db_delete('prim_form')
    ->condition('sid', $submission->sid)
    ->execute();
}

/**
 * Implementation of hook_node_delete().
 */
function prim_form_node_delete($node) {

  if (in_array($node->type, variable_get('webform_node_types'))) {

    // Remove any trace of prim_form data from the database for the node.
    db_delete('prim_form')
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Implementation of hook_node_access.
 *
 * Perform actions before a user views a page.
 * Makes sure new users fill out the teacher-form before
 * a student-form can be filled out.
 */
function prim_form_node_access($node, $op, $account) {

  if ($op == 'view') {

    if (variable_get('prim_form_reference', NULL) != NULL && variable_get('prim_form_student_type', NULL) != NULL) {

      if ($node->type == variable_get('prim_form_student_type')) {

        $prim_reference_field = variable_get('prim_form_reference', NULL);
        if (isset($node->{$prim_reference_field}['und'][0]['nid'])
            && !user_access('administer Prim form')) {

          $teacher_form_nid = $node->{$prim_reference_field}['und'][0]['nid'];

          $result = db_query('SELECT * FROM {prim_form} WHERE uid = :uid AND nid = :nid', array(':uid' => $account->uid, ':nid' => $teacher_form_nid));
          $bool = FALSE;
          foreach ($result as $key) {
            $bool = TRUE;
          }

          // if (!$bool && user_is_logged_in()) {
          //   drupal_set_message(t('Du måste fylla i följande enkät innan du kan registrera resultatrapporter.'), $type = 'warning', $repeat = TRUE);
          //   drupal_goto('node/'. $teacher_form_nid);
          // }
          if (!$bool && user_is_logged_in()) {
            drupal_set_message(t("Kom ihåg att fylla i ". l('lärarenkäten', 'node/'. $teacher_form_nid) ." för denna resultatrapportering."), $type = 'warning', $repeat = FALSE);
          }
        }
      }
    }
  }
}

/**
 * Implementation of hook_user_delete().
 *
 * When a user is deleted from db, we want to
 * remove his posts in prim_form
 */
function prim_form_user_delete($account) {
  db_delete('prim_form')
    ->condition('uid', $account->uid)
    ->execute();
}


/**
 * Implementation of hook_preprocess.
 * 
 * Set value for $prim_message and $prim_url
 * so that they can be used in 
 * webform-confirmation.tpl.php
 *
 */
function prim_form_preprocess(&$variables, $hook) {
  if ($hook == 'webform_confirmation') {

    if ($variables['node']->type == variable_get('prim_form_teacher_type', NULL)) {
      $variables['prim_message'] = t('Administrera ditt inskickade resultat för denna enkät');
      $variables['prim_url'] = t('node/'. $variables['node']->nid .'/submissions');
    }
    elseif ($variables['node']->type == variable_get('prim_form_student_type', NULL)) {
      $variables['prim_message'] = t('Registrera nästa elevresultat');
      $variables['prim_url'] = t('node/'. $variables['node']->nid);
    }
    else {
      $variables['prim_message'] = NULL;
      $variables['prim_url'] = NULL;
    }
  }
}
